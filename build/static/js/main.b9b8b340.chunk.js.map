{"version":3,"sources":["components/AddForm.js","components/Directory.js","components/Filter.js","components/Notification.js","components/Error.js","services/DbMethods.js","App.js","index.js"],"names":["AddForm","_ref","newName","newNumber","setNewName","handleNewName","setNewNumber","persons","setPersons","handleNewNumber","insertRecord","react_default","a","createElement","onSubmit","value","onChange","type","Directory","newFilter","handleDelete","filteredPersons","length","filter","name","match","RegExp","map","person","key","id","className","number","onClick","Filter","setNewFilter","evt","target","Notification","message","Error","errorMessage","dbUrl","DbMethods","axios","get","then","response","data","newObject","post","put","concat","delete","App","_useState","useState","_useState2","Object","slicedToArray","_useState3","_useState4","_useState5","_useState6","_useState7","_useState8","_useState9","_useState10","notification","setNotification","_useState11","_useState12","error","setError","useEffect","Data","dirList","ifNameExists","ifNumExists","components_Notification","components_Error","components_AddForm","preventDefault","who","setTimeout","window","confirm","oldPerson","res","components_Filter","components_Directory","numID","find","num","catch","err","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.b9b8b340.chunk.js","sourcesContent":["import React from 'react'\n\nconst AddForm = ({ newName, setNewName, newNumber, setNewNumber, persons, setPersons, handleNewName, handleNewNumber, insertRecord }) => {\n    return (\n        <form onSubmit={ insertRecord }>\n            <h3>Lisää uusi kontakti</h3>\n            <div>\n                nimi: <br /> <input value={ newName } onChange={ handleNewName } />\n            </div>\n            <div>\n                numero: <br /> <input value={ newNumber } onChange={ handleNewNumber} />\n            </div>\n            <div>\n                <button type=\"submit\">lisää</button>\n            </div>\n        </form>\n    )\n}\n\nexport default AddForm\n","import React from 'react'\n\n\nconst Directory = ({ persons, setPersons, newFilter, handleDelete }) => {\n\n    // check if filter exists and match with RegExp (causes errors with symbols like +, -, / etc)\n    const filteredPersons = (newFilter.length > 0) ? persons.filter(a => a.name.match(new RegExp(newFilter, 'gi'))) : persons\n\n    return (\n        <div>\n            <h2>Kontaktit</h2>\n            <ul>\n                { filteredPersons.map(person =>\n                    <li key={ person.id } className=\"list\">\n                        <div className=\"list-name\">\n                            { person.name }\n                        </div>\n                        <div className=\"list-number\">\n                            { person.number }\n                        </div>\n                        <div className=\"list-delete\">\n                            <button onClick={ () => handleDelete(person.id) }>\n                                delete\n                            </button>\n                        </div>\n                    </li>)\n                }\n            </ul>\n        </div>\n    )\n}\n\nexport default Directory\n","import React from 'react'\n\nconst Filter = ({ newFilter, setNewFilter }) => {\n\n    const handleFilter = (evt) => {\n        setNewFilter(evt.target.value)\n    }\n\n    return (\n        <div>\n            <form>\n                <input value={ newFilter } onChange={ handleFilter } />\n            </form>\n        </div>\n    )\n}\n\nexport default Filter\n","import React from 'react'\n\nconst Notification = ({ message }) => {\n    if (message === null) {\n        return null\n    }\n\n    return (\n        <div className=\"notif-panel\">\n            { message }\n        </div>\n    )\n}\n\n\nexport default Notification\n","import React from 'react'\n\nconst Error = ({ errorMessage }) => {\n    if (errorMessage === null) {\n        return null\n    }\n\n    return (\n        <div className=\"error-panel\">\n            Virhe! { errorMessage }\n        </div>\n    )\n}\n\nexport default Error\n","import axios from 'axios'\nconst dbUrl = '/persons'\n\nconst getDir = () => {\n    const req = axios.get(dbUrl)\n    return req.then(response => {\n        return response.data\n    })\n}\n\nconst insert = (newObject) => {\n    const req = axios.post(dbUrl, newObject)\n    return req.then(response => response.data )\n}\n\nconst update = (id, newObject) => {\n    const req = axios.put(`${dbUrl}/${id}`, newObject)\n    return req.then(response => response.data)\n}\n\nconst delNum = (id) => {\n    const req = axios.delete(`${dbUrl}/${id}`)\n    return req.then(response => response.data)\n}\n\nexport default { getDir, insert, update, delNum }\n","import React, { useState, useEffect } from 'react'\n\nimport AddForm from './components/AddForm'\nimport Directory from './components/Directory'\nimport Filter from './components/Filter'\nimport Notification from './components/Notification'\nimport Error from './components/Error'\nimport Data from './services/DbMethods'\n\nimport './index.css'\n\nconst App = () => {\n    const [ persons, setPersons ] = useState([])\n    const [ newName, setNewName ] = useState('')\n    const [ newNumber, setNewNumber ] = useState('')\n    const [ newFilter, setNewFilter ] = useState('')\n    const [ notification, setNotification ] = useState(null)\n    const [ error, setError ] = useState(null)\n\n    useEffect(() => {\n        Data.getDir()\n        .then(dirList =>\n            setPersons(dirList)\n        )}, []);\n\n    // input handlers\n    const handleNewName = (evt) => setNewName(evt.target.value)\n    const handleNewNumber = (evt) => setNewNumber(evt.target.value)\n\n    // check if number and or name exists\n    const ifNameExists = persons.filter(a => a.name === newName).length > 0 ? true : false\n    const ifNumExists = persons.filter(a => a.number === newNumber).length > 0 ? true : false\n\n    // Insert a new record into the directory\n    const insertRecord = (evt) => {\n        evt.preventDefault()\n        // Check if name or number exists and prevent addition\n        if (ifNumExists) {\n            let who = persons.filter(a => a.number === newNumber)[0]\n            setNotification(`${who.number} on asetettu jo kontaktille ${who.name}`)\n            setTimeout(() => { setNotification(null) }, 1500)\n            setNewNumber('')\n        } else {\n            const newObject = {\n                name: newName,\n                number: newNumber\n            }\n            if (ifNameExists) {\n                // if name exists -> ask for confirmation on number change\n                if (window.confirm(`Kontakti ${ newName } on jo luettelossa, haluatko korvata numeron uudella?`)) {\n                    let oldPerson = persons.filter(a => a.name === newName)[0];\n                    Data\n                    .update(oldPerson.id, newObject)\n                    .then(res => {\n                        setPersons(persons.map(person => (person.id === oldPerson.id) ? res : person))\n                        setNotification(`Kontaktin ${newName} numero päivitetty.`)\n                        setTimeout(() => { setNotification(null) }, 2500);\n                    })\n                }\n            } else {\n                Data.insert(newObject)\n                .then(response => {\n                    setPersons(persons.concat(response))\n                    setNotification(`Uusi kontakti ${newName} lisätty`)\n                    setTimeout(() => { setNotification(null) }, 2500);\n                })\n            }\n            setNewName('')\n            setNewNumber('')\n        }\n    }\n\n    const handleDelete = (numID) => {\n        const person = persons.find(a => a.id === numID)\n        if (window.confirm(`Haluatko poistaa kontaktin ${person.name} (ID: ${person.id})`)) {\n            Data.delNum(numID)\n            .then(res => {\n                setPersons(persons.filter(num => num.id !== numID))\n                setNotification(`Kontakti ${person.name} poistettu`)\n                setTimeout(() => { setNotification(null) }, 2500 )\n            })\n            .catch(err => {\n                setError(`Kontakti ${person.name} on jo poistettu!`)\n                setPersons(persons.filter(num => num.id !== numID))\n                setTimeout(() => { setError(null) }, 2500)\n            })\n        }\n    }\n\n    return (\n        <div>\n            <h2>Puhelinluettelo</h2>\n            <Notification message={ notification } />\n            <Error errorMessage={ error } />\n            <AddForm persons={ persons }\n                     setPersons={ setPersons }\n                     newName={ newName }\n                     setNewName={ setNewName }\n                     newNumber={ newNumber }\n                     setNewNumber={ setNewNumber }\n                     handleNewName={ handleNewName }\n                     handleNewNumber={ handleNewNumber }\n                     insertRecord={ insertRecord }\n                     />\n            <h3>Rajaa henkilöitä</h3>\n            <Filter newFilter={ newFilter } setNewFilter={ setNewFilter } />\n            <Directory persons={ persons } setPersons={ setPersons } newFilter={ newFilter } handleDelete={ handleDelete } />\n        </div>\n    )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}